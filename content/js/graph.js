/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 5095.0, "series": [{"data": [[0.0, 9.0], [0.1, 12.0], [0.2, 13.0], [0.3, 13.0], [0.4, 14.0], [0.5, 14.0], [0.6, 15.0], [0.7, 15.0], [0.8, 16.0], [0.9, 17.0], [1.0, 17.0], [1.1, 18.0], [1.2, 18.0], [1.3, 19.0], [1.4, 19.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 21.0], [1.9, 21.0], [2.0, 22.0], [2.1, 22.0], [2.2, 23.0], [2.3, 23.0], [2.4, 24.0], [2.5, 24.0], [2.6, 25.0], [2.7, 25.0], [2.8, 26.0], [2.9, 26.0], [3.0, 27.0], [3.1, 27.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 29.0], [3.6, 29.0], [3.7, 30.0], [3.8, 30.0], [3.9, 30.0], [4.0, 31.0], [4.1, 31.0], [4.2, 32.0], [4.3, 32.0], [4.4, 33.0], [4.5, 33.0], [4.6, 33.0], [4.7, 34.0], [4.8, 34.0], [4.9, 35.0], [5.0, 35.0], [5.1, 35.0], [5.2, 36.0], [5.3, 36.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 38.0], [5.8, 38.0], [5.9, 38.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 40.0], [6.4, 40.0], [6.5, 41.0], [6.6, 42.0], [6.7, 43.0], [6.8, 43.0], [6.9, 44.0], [7.0, 45.0], [7.1, 45.0], [7.2, 46.0], [7.3, 47.0], [7.4, 47.0], [7.5, 48.0], [7.6, 48.0], [7.7, 49.0], [7.8, 49.0], [7.9, 49.0], [8.0, 50.0], [8.1, 50.0], [8.2, 51.0], [8.3, 51.0], [8.4, 52.0], [8.5, 52.0], [8.6, 52.0], [8.7, 53.0], [8.8, 54.0], [8.9, 55.0], [9.0, 55.0], [9.1, 56.0], [9.2, 56.0], [9.3, 57.0], [9.4, 57.0], [9.5, 57.0], [9.6, 57.0], [9.7, 58.0], [9.8, 58.0], [9.9, 58.0], [10.0, 59.0], [10.1, 59.0], [10.2, 60.0], [10.3, 60.0], [10.4, 61.0], [10.5, 62.0], [10.6, 63.0], [10.7, 63.0], [10.8, 64.0], [10.9, 64.0], [11.0, 64.0], [11.1, 64.0], [11.2, 65.0], [11.3, 65.0], [11.4, 65.0], [11.5, 66.0], [11.6, 66.0], [11.7, 66.0], [11.8, 67.0], [11.9, 67.0], [12.0, 68.0], [12.1, 68.0], [12.2, 69.0], [12.3, 69.0], [12.4, 70.0], [12.5, 71.0], [12.6, 71.0], [12.7, 72.0], [12.8, 72.0], [12.9, 73.0], [13.0, 73.0], [13.1, 74.0], [13.2, 75.0], [13.3, 75.0], [13.4, 75.0], [13.5, 76.0], [13.6, 77.0], [13.7, 77.0], [13.8, 80.0], [13.9, 82.0], [14.0, 84.0], [14.1, 87.0], [14.2, 88.0], [14.3, 89.0], [14.4, 91.0], [14.5, 92.0], [14.6, 94.0], [14.7, 103.0], [14.8, 107.0], [14.9, 113.0], [15.0, 116.0], [15.1, 118.0], [15.2, 119.0], [15.3, 121.0], [15.4, 121.0], [15.5, 122.0], [15.6, 123.0], [15.7, 124.0], [15.8, 124.0], [15.9, 124.0], [16.0, 125.0], [16.1, 126.0], [16.2, 127.0], [16.3, 127.0], [16.4, 128.0], [16.5, 128.0], [16.6, 128.0], [16.7, 129.0], [16.8, 129.0], [16.9, 130.0], [17.0, 130.0], [17.1, 131.0], [17.2, 132.0], [17.3, 132.0], [17.4, 133.0], [17.5, 133.0], [17.6, 134.0], [17.7, 135.0], [17.8, 135.0], [17.9, 136.0], [18.0, 137.0], [18.1, 138.0], [18.2, 138.0], [18.3, 139.0], [18.4, 140.0], [18.5, 140.0], [18.6, 141.0], [18.7, 142.0], [18.8, 142.0], [18.9, 143.0], [19.0, 143.0], [19.1, 144.0], [19.2, 144.0], [19.3, 144.0], [19.4, 145.0], [19.5, 145.0], [19.6, 146.0], [19.7, 146.0], [19.8, 146.0], [19.9, 147.0], [20.0, 147.0], [20.1, 148.0], [20.2, 149.0], [20.3, 149.0], [20.4, 150.0], [20.5, 151.0], [20.6, 152.0], [20.7, 152.0], [20.8, 153.0], [20.9, 153.0], [21.0, 154.0], [21.1, 154.0], [21.2, 155.0], [21.3, 156.0], [21.4, 157.0], [21.5, 157.0], [21.6, 158.0], [21.7, 158.0], [21.8, 159.0], [21.9, 160.0], [22.0, 160.0], [22.1, 161.0], [22.2, 161.0], [22.3, 162.0], [22.4, 162.0], [22.5, 162.0], [22.6, 163.0], [22.7, 163.0], [22.8, 164.0], [22.9, 164.0], [23.0, 165.0], [23.1, 165.0], [23.2, 166.0], [23.3, 167.0], [23.4, 167.0], [23.5, 168.0], [23.6, 168.0], [23.7, 169.0], [23.8, 170.0], [23.9, 171.0], [24.0, 172.0], [24.1, 173.0], [24.2, 174.0], [24.3, 175.0], [24.4, 175.0], [24.5, 176.0], [24.6, 177.0], [24.7, 178.0], [24.8, 180.0], [24.9, 181.0], [25.0, 183.0], [25.1, 186.0], [25.2, 187.0], [25.3, 189.0], [25.4, 193.0], [25.5, 195.0], [25.6, 197.0], [25.7, 200.0], [25.8, 204.0], [25.9, 207.0], [26.0, 212.0], [26.1, 217.0], [26.2, 220.0], [26.3, 221.0], [26.4, 222.0], [26.5, 223.0], [26.6, 224.0], [26.7, 226.0], [26.8, 226.0], [26.9, 228.0], [27.0, 228.0], [27.1, 228.0], [27.2, 229.0], [27.3, 229.0], [27.4, 230.0], [27.5, 230.0], [27.6, 230.0], [27.7, 231.0], [27.8, 231.0], [27.9, 231.0], [28.0, 232.0], [28.1, 232.0], [28.2, 233.0], [28.3, 233.0], [28.4, 233.0], [28.5, 234.0], [28.6, 234.0], [28.7, 234.0], [28.8, 235.0], [28.9, 235.0], [29.0, 235.0], [29.1, 236.0], [29.2, 236.0], [29.3, 236.0], [29.4, 237.0], [29.5, 237.0], [29.6, 237.0], [29.7, 238.0], [29.8, 238.0], [29.9, 238.0], [30.0, 238.0], [30.1, 238.0], [30.2, 239.0], [30.3, 239.0], [30.4, 239.0], [30.5, 239.0], [30.6, 240.0], [30.7, 240.0], [30.8, 240.0], [30.9, 240.0], [31.0, 241.0], [31.1, 241.0], [31.2, 241.0], [31.3, 241.0], [31.4, 241.0], [31.5, 242.0], [31.6, 242.0], [31.7, 242.0], [31.8, 242.0], [31.9, 243.0], [32.0, 243.0], [32.1, 243.0], [32.2, 243.0], [32.3, 243.0], [32.4, 244.0], [32.5, 244.0], [32.6, 244.0], [32.7, 244.0], [32.8, 245.0], [32.9, 245.0], [33.0, 245.0], [33.1, 245.0], [33.2, 245.0], [33.3, 246.0], [33.4, 246.0], [33.5, 246.0], [33.6, 247.0], [33.7, 247.0], [33.8, 247.0], [33.9, 247.0], [34.0, 248.0], [34.1, 248.0], [34.2, 248.0], [34.3, 248.0], [34.4, 248.0], [34.5, 248.0], [34.6, 249.0], [34.7, 249.0], [34.8, 249.0], [34.9, 249.0], [35.0, 249.0], [35.1, 250.0], [35.2, 250.0], [35.3, 250.0], [35.4, 250.0], [35.5, 250.0], [35.6, 250.0], [35.7, 251.0], [35.8, 251.0], [35.9, 251.0], [36.0, 251.0], [36.1, 251.0], [36.2, 251.0], [36.3, 252.0], [36.4, 252.0], [36.5, 252.0], [36.6, 252.0], [36.7, 253.0], [36.8, 253.0], [36.9, 253.0], [37.0, 253.0], [37.1, 254.0], [37.2, 254.0], [37.3, 254.0], [37.4, 254.0], [37.5, 254.0], [37.6, 254.0], [37.7, 255.0], [37.8, 255.0], [37.9, 255.0], [38.0, 255.0], [38.1, 256.0], [38.2, 256.0], [38.3, 256.0], [38.4, 257.0], [38.5, 257.0], [38.6, 257.0], [38.7, 257.0], [38.8, 257.0], [38.9, 257.0], [39.0, 258.0], [39.1, 258.0], [39.2, 258.0], [39.3, 258.0], [39.4, 258.0], [39.5, 258.0], [39.6, 259.0], [39.7, 259.0], [39.8, 259.0], [39.9, 259.0], [40.0, 259.0], [40.1, 260.0], [40.2, 260.0], [40.3, 260.0], [40.4, 260.0], [40.5, 260.0], [40.6, 260.0], [40.7, 261.0], [40.8, 261.0], [40.9, 261.0], [41.0, 261.0], [41.1, 262.0], [41.2, 262.0], [41.3, 262.0], [41.4, 262.0], [41.5, 262.0], [41.6, 263.0], [41.7, 263.0], [41.8, 263.0], [41.9, 263.0], [42.0, 264.0], [42.1, 264.0], [42.2, 264.0], [42.3, 264.0], [42.4, 264.0], [42.5, 264.0], [42.6, 265.0], [42.7, 265.0], [42.8, 265.0], [42.9, 265.0], [43.0, 265.0], [43.1, 265.0], [43.2, 266.0], [43.3, 266.0], [43.4, 266.0], [43.5, 266.0], [43.6, 266.0], [43.7, 267.0], [43.8, 267.0], [43.9, 267.0], [44.0, 267.0], [44.1, 267.0], [44.2, 267.0], [44.3, 268.0], [44.4, 268.0], [44.5, 268.0], [44.6, 268.0], [44.7, 268.0], [44.8, 269.0], [44.9, 269.0], [45.0, 269.0], [45.1, 269.0], [45.2, 269.0], [45.3, 269.0], [45.4, 269.0], [45.5, 270.0], [45.6, 270.0], [45.7, 270.0], [45.8, 270.0], [45.9, 271.0], [46.0, 271.0], [46.1, 271.0], [46.2, 271.0], [46.3, 272.0], [46.4, 272.0], [46.5, 272.0], [46.6, 272.0], [46.7, 272.0], [46.8, 273.0], [46.9, 273.0], [47.0, 273.0], [47.1, 273.0], [47.2, 273.0], [47.3, 274.0], [47.4, 274.0], [47.5, 274.0], [47.6, 274.0], [47.7, 275.0], [47.8, 275.0], [47.9, 275.0], [48.0, 275.0], [48.1, 276.0], [48.2, 276.0], [48.3, 276.0], [48.4, 276.0], [48.5, 277.0], [48.6, 277.0], [48.7, 277.0], [48.8, 277.0], [48.9, 277.0], [49.0, 278.0], [49.1, 278.0], [49.2, 278.0], [49.3, 279.0], [49.4, 279.0], [49.5, 279.0], [49.6, 279.0], [49.7, 279.0], [49.8, 280.0], [49.9, 280.0], [50.0, 280.0], [50.1, 280.0], [50.2, 280.0], [50.3, 281.0], [50.4, 281.0], [50.5, 281.0], [50.6, 281.0], [50.7, 281.0], [50.8, 282.0], [50.9, 282.0], [51.0, 282.0], [51.1, 282.0], [51.2, 283.0], [51.3, 283.0], [51.4, 283.0], [51.5, 283.0], [51.6, 284.0], [51.7, 284.0], [51.8, 284.0], [51.9, 284.0], [52.0, 284.0], [52.1, 285.0], [52.2, 285.0], [52.3, 285.0], [52.4, 285.0], [52.5, 285.0], [52.6, 285.0], [52.7, 286.0], [52.8, 286.0], [52.9, 286.0], [53.0, 287.0], [53.1, 287.0], [53.2, 287.0], [53.3, 287.0], [53.4, 287.0], [53.5, 288.0], [53.6, 288.0], [53.7, 288.0], [53.8, 288.0], [53.9, 289.0], [54.0, 289.0], [54.1, 289.0], [54.2, 289.0], [54.3, 290.0], [54.4, 290.0], [54.5, 290.0], [54.6, 290.0], [54.7, 291.0], [54.8, 291.0], [54.9, 291.0], [55.0, 291.0], [55.1, 291.0], [55.2, 292.0], [55.3, 292.0], [55.4, 292.0], [55.5, 292.0], [55.6, 292.0], [55.7, 293.0], [55.8, 293.0], [55.9, 293.0], [56.0, 293.0], [56.1, 294.0], [56.2, 294.0], [56.3, 294.0], [56.4, 294.0], [56.5, 295.0], [56.6, 295.0], [56.7, 295.0], [56.8, 295.0], [56.9, 296.0], [57.0, 296.0], [57.1, 296.0], [57.2, 297.0], [57.3, 297.0], [57.4, 297.0], [57.5, 298.0], [57.6, 298.0], [57.7, 298.0], [57.8, 298.0], [57.9, 298.0], [58.0, 299.0], [58.1, 299.0], [58.2, 299.0], [58.3, 300.0], [58.4, 300.0], [58.5, 300.0], [58.6, 300.0], [58.7, 301.0], [58.8, 301.0], [58.9, 301.0], [59.0, 302.0], [59.1, 302.0], [59.2, 302.0], [59.3, 302.0], [59.4, 302.0], [59.5, 303.0], [59.6, 303.0], [59.7, 303.0], [59.8, 303.0], [59.9, 304.0], [60.0, 304.0], [60.1, 304.0], [60.2, 305.0], [60.3, 305.0], [60.4, 305.0], [60.5, 306.0], [60.6, 306.0], [60.7, 307.0], [60.8, 307.0], [60.9, 308.0], [61.0, 308.0], [61.1, 309.0], [61.2, 309.0], [61.3, 310.0], [61.4, 310.0], [61.5, 310.0], [61.6, 311.0], [61.7, 311.0], [61.8, 311.0], [61.9, 311.0], [62.0, 312.0], [62.1, 312.0], [62.2, 312.0], [62.3, 313.0], [62.4, 313.0], [62.5, 313.0], [62.6, 313.0], [62.7, 314.0], [62.8, 314.0], [62.9, 314.0], [63.0, 315.0], [63.1, 315.0], [63.2, 315.0], [63.3, 315.0], [63.4, 316.0], [63.5, 316.0], [63.6, 316.0], [63.7, 317.0], [63.8, 317.0], [63.9, 317.0], [64.0, 318.0], [64.1, 318.0], [64.2, 318.0], [64.3, 318.0], [64.4, 318.0], [64.5, 319.0], [64.6, 319.0], [64.7, 319.0], [64.8, 319.0], [64.9, 320.0], [65.0, 320.0], [65.1, 320.0], [65.2, 321.0], [65.3, 321.0], [65.4, 321.0], [65.5, 322.0], [65.6, 322.0], [65.7, 322.0], [65.8, 323.0], [65.9, 323.0], [66.0, 324.0], [66.1, 324.0], [66.2, 324.0], [66.3, 325.0], [66.4, 325.0], [66.5, 326.0], [66.6, 326.0], [66.7, 326.0], [66.8, 327.0], [66.9, 327.0], [67.0, 327.0], [67.1, 328.0], [67.2, 328.0], [67.3, 329.0], [67.4, 329.0], [67.5, 329.0], [67.6, 330.0], [67.7, 330.0], [67.8, 331.0], [67.9, 331.0], [68.0, 332.0], [68.1, 332.0], [68.2, 333.0], [68.3, 334.0], [68.4, 334.0], [68.5, 335.0], [68.6, 335.0], [68.7, 336.0], [68.8, 336.0], [68.9, 337.0], [69.0, 337.0], [69.1, 338.0], [69.2, 338.0], [69.3, 339.0], [69.4, 339.0], [69.5, 340.0], [69.6, 341.0], [69.7, 341.0], [69.8, 342.0], [69.9, 342.0], [70.0, 343.0], [70.1, 344.0], [70.2, 344.0], [70.3, 344.0], [70.4, 345.0], [70.5, 345.0], [70.6, 346.0], [70.7, 347.0], [70.8, 347.0], [70.9, 348.0], [71.0, 349.0], [71.1, 349.0], [71.2, 350.0], [71.3, 351.0], [71.4, 351.0], [71.5, 352.0], [71.6, 352.0], [71.7, 353.0], [71.8, 354.0], [71.9, 355.0], [72.0, 355.0], [72.1, 356.0], [72.2, 356.0], [72.3, 357.0], [72.4, 358.0], [72.5, 359.0], [72.6, 359.0], [72.7, 360.0], [72.8, 361.0], [72.9, 362.0], [73.0, 363.0], [73.1, 363.0], [73.2, 365.0], [73.3, 366.0], [73.4, 366.0], [73.5, 367.0], [73.6, 368.0], [73.7, 369.0], [73.8, 370.0], [73.9, 371.0], [74.0, 372.0], [74.1, 373.0], [74.2, 374.0], [74.3, 376.0], [74.4, 377.0], [74.5, 378.0], [74.6, 379.0], [74.7, 380.0], [74.8, 380.0], [74.9, 381.0], [75.0, 384.0], [75.1, 384.0], [75.2, 386.0], [75.3, 390.0], [75.4, 392.0], [75.5, 393.0], [75.6, 394.0], [75.7, 395.0], [75.8, 396.0], [75.9, 397.0], [76.0, 398.0], [76.1, 399.0], [76.2, 400.0], [76.3, 402.0], [76.4, 404.0], [76.5, 406.0], [76.6, 408.0], [76.7, 410.0], [76.8, 411.0], [76.9, 412.0], [77.0, 414.0], [77.1, 415.0], [77.2, 416.0], [77.3, 418.0], [77.4, 420.0], [77.5, 421.0], [77.6, 423.0], [77.7, 424.0], [77.8, 425.0], [77.9, 426.0], [78.0, 426.0], [78.1, 428.0], [78.2, 430.0], [78.3, 431.0], [78.4, 431.0], [78.5, 433.0], [78.6, 435.0], [78.7, 437.0], [78.8, 439.0], [78.9, 440.0], [79.0, 441.0], [79.1, 442.0], [79.2, 445.0], [79.3, 448.0], [79.4, 451.0], [79.5, 455.0], [79.6, 457.0], [79.7, 458.0], [79.8, 460.0], [79.9, 461.0], [80.0, 464.0], [80.1, 466.0], [80.2, 468.0], [80.3, 471.0], [80.4, 472.0], [80.5, 474.0], [80.6, 477.0], [80.7, 478.0], [80.8, 480.0], [80.9, 483.0], [81.0, 484.0], [81.1, 486.0], [81.2, 487.0], [81.3, 490.0], [81.4, 492.0], [81.5, 494.0], [81.6, 498.0], [81.7, 501.0], [81.8, 503.0], [81.9, 506.0], [82.0, 509.0], [82.1, 512.0], [82.2, 518.0], [82.3, 522.0], [82.4, 530.0], [82.5, 539.0], [82.6, 544.0], [82.7, 549.0], [82.8, 556.0], [82.9, 562.0], [83.0, 570.0], [83.1, 574.0], [83.2, 581.0], [83.3, 585.0], [83.4, 589.0], [83.5, 593.0], [83.6, 595.0], [83.7, 599.0], [83.8, 605.0], [83.9, 614.0], [84.0, 621.0], [84.1, 629.0], [84.2, 636.0], [84.3, 641.0], [84.4, 645.0], [84.5, 652.0], [84.6, 656.0], [84.7, 659.0], [84.8, 664.0], [84.9, 669.0], [85.0, 676.0], [85.1, 683.0], [85.2, 690.0], [85.3, 697.0], [85.4, 704.0], [85.5, 707.0], [85.6, 711.0], [85.7, 716.0], [85.8, 722.0], [85.9, 728.0], [86.0, 731.0], [86.1, 737.0], [86.2, 741.0], [86.3, 744.0], [86.4, 745.0], [86.5, 748.0], [86.6, 750.0], [86.7, 751.0], [86.8, 755.0], [86.9, 759.0], [87.0, 764.0], [87.1, 773.0], [87.2, 782.0], [87.3, 788.0], [87.4, 792.0], [87.5, 798.0], [87.6, 800.0], [87.7, 804.0], [87.8, 807.0], [87.9, 811.0], [88.0, 815.0], [88.1, 818.0], [88.2, 823.0], [88.3, 830.0], [88.4, 837.0], [88.5, 842.0], [88.6, 851.0], [88.7, 861.0], [88.8, 865.0], [88.9, 870.0], [89.0, 874.0], [89.1, 879.0], [89.2, 885.0], [89.3, 891.0], [89.4, 896.0], [89.5, 903.0], [89.6, 909.0], [89.7, 917.0], [89.8, 922.0], [89.9, 933.0], [90.0, 941.0], [90.1, 946.0], [90.2, 957.0], [90.3, 964.0], [90.4, 973.0], [90.5, 985.0], [90.6, 996.0], [90.7, 1002.0], [90.8, 1011.0], [90.9, 1014.0], [91.0, 1021.0], [91.1, 1024.0], [91.2, 1029.0], [91.3, 1039.0], [91.4, 1054.0], [91.5, 1065.0], [91.6, 1080.0], [91.7, 1084.0], [91.8, 1090.0], [91.9, 1093.0], [92.0, 1097.0], [92.1, 1104.0], [92.2, 1111.0], [92.3, 1116.0], [92.4, 1119.0], [92.5, 1124.0], [92.6, 1136.0], [92.7, 1145.0], [92.8, 1152.0], [92.9, 1163.0], [93.0, 1174.0], [93.1, 1188.0], [93.2, 1194.0], [93.3, 1204.0], [93.4, 1217.0], [93.5, 1231.0], [93.6, 1250.0], [93.7, 1263.0], [93.8, 1269.0], [93.9, 1278.0], [94.0, 1286.0], [94.1, 1289.0], [94.2, 1295.0], [94.3, 1307.0], [94.4, 1316.0], [94.5, 1323.0], [94.6, 1331.0], [94.7, 1337.0], [94.8, 1343.0], [94.9, 1355.0], [95.0, 1362.0], [95.1, 1368.0], [95.2, 1372.0], [95.3, 1377.0], [95.4, 1388.0], [95.5, 1405.0], [95.6, 1418.0], [95.7, 1440.0], [95.8, 1465.0], [95.9, 1479.0], [96.0, 1523.0], [96.1, 1555.0], [96.2, 1581.0], [96.3, 1596.0], [96.4, 1626.0], [96.5, 1658.0], [96.6, 1675.0], [96.7, 1712.0], [96.8, 1747.0], [96.9, 1795.0], [97.0, 1844.0], [97.1, 1876.0], [97.2, 1892.0], [97.3, 1955.0], [97.4, 2018.0], [97.5, 2084.0], [97.6, 2119.0], [97.7, 2134.0], [97.8, 2197.0], [97.9, 2232.0], [98.0, 2271.0], [98.1, 2308.0], [98.2, 2336.0], [98.3, 2368.0], [98.4, 2491.0], [98.5, 2540.0], [98.6, 2662.0], [98.7, 2729.0], [98.8, 2978.0], [98.9, 3021.0], [99.0, 3031.0], [99.1, 3069.0], [99.2, 3094.0], [99.3, 3196.0], [99.4, 3293.0], [99.5, 3411.0], [99.6, 4187.0], [99.7, 4512.0], [99.8, 4713.0], [99.9, 4772.0], [100.0, 5095.0]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 3261.0, "series": [{"data": [[0.0, 1468.0], [600.0, 163.0], [700.0, 222.0], [800.0, 188.0], [900.0, 122.0], [1000.0, 135.0], [1100.0, 122.0], [1200.0, 102.0], [1300.0, 122.0], [1400.0, 47.0], [1500.0, 36.0], [100.0, 1100.0], [1600.0, 38.0], [1700.0, 22.0], [1800.0, 30.0], [1900.0, 16.0], [2000.0, 16.0], [2100.0, 30.0], [2300.0, 30.0], [2200.0, 23.0], [2400.0, 9.0], [2500.0, 12.0], [2600.0, 12.0], [2800.0, 5.0], [2700.0, 5.0], [2900.0, 2.0], [3000.0, 42.0], [3100.0, 8.0], [200.0, 3261.0], [3200.0, 10.0], [3300.0, 9.0], [3400.0, 4.0], [3700.0, 2.0], [3800.0, 3.0], [4100.0, 3.0], [4300.0, 2.0], [4200.0, 2.0], [4400.0, 4.0], [4500.0, 5.0], [4600.0, 4.0], [300.0, 1785.0], [4700.0, 12.0], [4800.0, 3.0], [4900.0, 2.0], [5000.0, 5.0], [400.0, 552.0], [500.0, 205.0]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8574.0, "series": [{"data": [[0.0, 106.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 980.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 340.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 8574.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 890.0080999999989, "minX": 1.68811434E12, "maxY": 890.0080999999989, "series": [{"data": [[1.68811434E12, 890.0080999999989]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68811434E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.5, "minX": 2.0, "maxY": 5095.0, "series": [{"data": [[2.0, 3589.0], [3.0, 4598.0], [4.0, 2497.0], [6.0, 2514.0], [7.0, 4428.0], [8.0, 2542.0], [9.0, 4435.0], [11.0, 3460.0], [12.0, 2540.0], [13.0, 2529.0], [16.0, 2520.6666666666665], [17.0, 2491.0], [21.0, 2467.0], [22.0, 4290.0], [23.0, 2386.0], [24.0, 2374.0], [25.0, 2368.0], [26.0, 2331.0], [28.0, 2346.0], [41.0, 3117.0], [40.0, 2600.7500000000005], [43.0, 3123.0], [42.0, 3118.0], [44.0, 3121.0], [47.0, 3075.0], [46.0, 2200.0], [51.0, 3094.0], [50.0, 2778.6666666666665], [53.0, 3079.5], [54.0, 3094.0], [57.0, 2119.0], [56.0, 2632.0], [59.0, 3069.0], [58.0, 3084.0], [61.0, 2163.0], [60.0, 3057.0], [63.0, 3081.0], [62.0, 3064.0], [67.0, 2188.0], [66.0, 3071.0], [65.0, 3076.0], [64.0, 2190.0], [70.0, 3019.0], [69.0, 3020.5], [75.0, 3018.0], [72.0, 3027.0], [78.0, 3030.0], [77.0, 3022.0], [76.0, 3020.0], [84.0, 3022.666666666667], [91.0, 2101.0], [90.0, 2103.0], [88.0, 2114.75], [95.0, 1122.0], [94.0, 3010.0], [93.0, 2134.0], [92.0, 2127.0], [98.0, 1105.0], [97.0, 1117.0], [103.0, 1130.0], [102.0, 1090.0], [100.0, 1109.0], [107.0, 1139.0], [104.0, 1093.0], [110.0, 1096.0], [109.0, 1126.0], [115.0, 1136.0], [114.0, 1149.0], [113.0, 1090.3333333333333], [119.0, 1090.0], [118.0, 1164.0], [116.0, 1086.0], [123.0, 1079.0], [122.0, 1142.0], [121.0, 1150.0], [120.0, 1083.0], [126.0, 1147.0], [125.0, 1173.0], [124.0, 1163.0], [135.0, 1095.0], [134.0, 1099.5], [132.0, 1151.0], [131.0, 1123.0], [129.0, 1110.0], [128.0, 1117.5], [143.0, 1062.0], [141.0, 1109.0], [140.0, 1117.3333333333333], [137.0, 1127.0], [136.0, 1145.0], [151.0, 1117.0], [149.0, 1129.0], [146.0, 1130.0], [145.0, 1022.5], [159.0, 1110.0], [158.0, 1019.5], [154.0, 1019.5], [152.0, 1124.0], [167.0, 1097.5], [165.0, 1117.25], [161.0, 1122.0], [160.0, 1113.0], [175.0, 1020.0], [174.0, 1021.0], [173.0, 1013.0], [172.0, 1118.0], [171.0, 1013.5], [169.0, 1107.0], [168.0, 1092.0], [183.0, 1023.0], [182.0, 1469.0], [181.0, 1022.0], [180.0, 1017.25], [176.0, 1014.0], [191.0, 1311.0], [190.0, 1555.0], [189.0, 1565.6666666666667], [186.0, 1593.0], [184.0, 1020.0], [197.0, 1288.0], [196.0, 2014.0], [195.0, 1688.0], [194.0, 1658.0], [193.0, 5095.0], [192.0, 1416.0], [207.0, 5094.0], [206.0, 2904.0], [205.0, 1656.5], [204.0, 995.0], [200.0, 1237.6666666666667], [215.0, 995.75], [213.0, 5087.0], [210.0, 1006.0], [209.0, 954.0], [223.0, 1221.0], [222.0, 1546.0], [221.0, 963.0], [219.0, 5071.0], [218.0, 1668.0], [230.0, 870.0], [229.0, 1282.5], [228.0, 842.0], [227.0, 996.0], [225.0, 1112.0], [224.0, 909.0], [238.0, 936.0], [237.0, 1243.5], [235.0, 1342.6666666666667], [232.0, 1338.5], [247.0, 1553.6666666666667], [246.0, 935.0], [243.0, 1474.6], [254.0, 906.0], [253.0, 1469.0], [251.0, 1492.0], [250.0, 1581.0], [249.0, 1388.0], [248.0, 1512.0], [270.0, 1357.0], [271.0, 939.0], [268.0, 796.0], [267.0, 1010.3333333333334], [264.0, 868.0], [263.0, 940.0], [262.0, 1058.75], [260.0, 870.0], [258.0, 1271.0], [257.0, 1363.0], [286.0, 1234.5], [284.0, 1234.0], [282.0, 881.0], [280.0, 913.0], [275.0, 1405.0], [274.0, 1340.0], [273.0, 854.0], [272.0, 1365.0], [291.0, 786.0], [301.0, 1032.3333333333333], [303.0, 1155.0], [300.0, 1382.0], [297.0, 895.0], [296.0, 1185.5], [294.0, 1109.0], [292.0, 1330.0], [290.0, 818.0], [289.0, 1224.5], [288.0, 896.0], [315.0, 2854.5], [313.0, 1295.0], [312.0, 1084.5], [311.0, 1462.0], [309.0, 3370.0], [308.0, 1455.0], [307.0, 969.75], [334.0, 1133.5], [330.0, 744.0], [329.0, 2816.0], [328.0, 730.0], [326.0, 815.0], [325.0, 1489.5], [321.0, 3341.0], [320.0, 1175.6], [338.0, 731.0], [349.0, 846.0], [350.0, 844.0], [348.0, 1349.8], [347.0, 821.0], [346.0, 684.0], [341.0, 1422.0], [340.0, 796.5], [337.0, 1369.0], [336.0, 1140.0], [364.0, 765.4], [354.0, 2466.75], [374.0, 770.3], [393.0, 1108.0], [392.0, 1071.0], [391.0, 1263.142857142857], [390.0, 663.0], [388.0, 824.5], [387.0, 1054.0], [386.0, 1866.0], [385.0, 656.0], [415.0, 966.1666666666666], [414.0, 809.0], [413.0, 810.0], [411.0, 798.3333333333334], [410.0, 803.0], [403.0, 807.2222222222222], [402.0, 817.0], [424.0, 2325.25], [421.0, 754.0], [420.0, 811.0], [418.0, 686.0], [417.0, 2018.0], [435.0, 729.5], [445.0, 689.0], [447.0, 762.5], [444.0, 754.0], [443.0, 699.5], [442.0, 764.0], [438.0, 2789.0], [436.0, 711.0], [433.0, 1007.5], [432.0, 704.5], [459.0, 1554.75], [455.0, 1465.0], [454.0, 737.6666666666666], [451.0, 2033.5], [449.0, 874.5], [448.0, 766.0], [477.0, 2775.0], [495.0, 565.0], [492.0, 580.4], [494.0, 136.0], [493.0, 748.3333333333334], [491.0, 2310.0], [489.0, 1126.0], [484.0, 1439.0], [496.0, 666.1249999999999], [501.0, 969.4], [511.0, 1938.3333333333335], [510.0, 762.0], [507.0, 2276.5], [506.0, 3275.5], [505.0, 1159.0], [502.0, 1058.0], [499.0, 783.0], [542.0, 125.0], [543.0, 282.6666666666667], [537.0, 1392.0], [536.0, 586.0], [535.0, 1311.2], [534.0, 1277.0], [529.0, 1156.0], [528.0, 4772.0], [527.0, 740.0], [526.0, 1290.0], [525.0, 749.0], [524.0, 731.2222222222223], [523.0, 664.0], [522.0, 750.0], [521.0, 749.0], [569.0, 1080.0], [571.0, 270.0], [570.0, 234.69230769230768], [572.0, 973.5], [573.0, 293.00000000000006], [575.0, 926.0833333333334], [567.0, 278.0], [566.0, 1393.0], [565.0, 629.0], [564.0, 1330.3333333333333], [561.0, 1321.818181818182], [574.0, 267.5], [555.0, 245.0], [552.0, 352.25], [549.0, 197.0], [568.0, 487.5], [550.0, 1381.0], [547.0, 599.6666666666667], [546.0, 1292.3333333333333], [544.0, 591.0], [582.0, 295.2857142857143], [592.0, 1714.6666666666667], [607.0, 229.33333333333334], [603.0, 494.0], [605.0, 1672.1666666666667], [604.0, 2942.0], [602.0, 463.0], [606.0, 167.0], [587.0, 261.00000000000006], [589.0, 1650.75], [588.0, 1608.6666666666667], [590.0, 406.25], [591.0, 1163.0], [586.0, 207.66666666666666], [585.0, 499.25], [584.0, 634.0], [601.0, 123.0], [600.0, 586.8], [599.0, 243.625], [598.0, 211.0], [593.0, 266.42857142857144], [595.0, 177.16666666666666], [594.0, 600.5], [597.0, 1834.25], [596.0, 101.83333333333334], [576.0, 351.6], [579.0, 364.3076923076923], [577.0, 298.90909090909093], [578.0, 886.2], [580.0, 910.5555555555555], [581.0, 362.1764705882353], [583.0, 458.47058823529403], [635.0, 347.0], [613.0, 342.47368421052636], [614.0, 374.45454545454544], [615.0, 994.0869565217391], [634.0, 330.87499999999994], [633.0, 491.3333333333333], [632.0, 331.5333333333333], [612.0, 572.8], [610.0, 243.71428571428572], [611.0, 611.5], [609.0, 282.1803278688525], [637.0, 318.16666666666663], [636.0, 319.6521739130435], [627.0, 278.1333333333333], [631.0, 1070.6923076923076], [630.0, 343.3], [628.0, 455.99999999999994], [629.0, 388.4166666666667], [626.0, 291.4230769230769], [625.0, 280.875], [624.0, 360.75], [639.0, 268.65], [638.0, 286.2142857142857], [619.0, 491.8461538461538], [618.0, 471.3529411764706], [617.0, 777.7142857142857], [616.0, 569.6315789473683], [620.0, 376.86363636363643], [622.0, 421.44444444444446], [621.0, 547.8333333333333], [623.0, 505.75], [608.0, 280.5555555555555], [666.0, 315.6923076923077], [643.0, 285.63636363636357], [652.0, 247.15151515151518], [648.0, 285.9361702127659], [653.0, 502.42857142857144], [654.0, 462.68749999999994], [640.0, 463.5], [642.0, 217.05555555555551], [641.0, 326.6923076923077], [655.0, 300.125], [649.0, 359.3157894736842], [651.0, 309.3333333333333], [650.0, 320.2142857142857], [647.0, 254.21428571428578], [664.0, 308.35714285714283], [665.0, 195.89473684210532], [669.0, 199.7878787878788], [671.0, 165.8], [670.0, 334.1111111111111], [668.0, 577.304347826087], [667.0, 454.0], [646.0, 299.37499999999994], [656.0, 372.1923076923077], [657.0, 466.5217391304348], [661.0, 243.94117647058823], [660.0, 317.3214285714286], [659.0, 256.54545454545456], [662.0, 455.3076923076923], [663.0, 735.5], [658.0, 196.4], [645.0, 323.0], [644.0, 228.57142857142853], [697.0, 292.1724137931034], [673.0, 686.4736842105264], [674.0, 406.4117647058824], [672.0, 574.7777777777778], [687.0, 949.0], [686.0, 213.36363636363635], [684.0, 365.3571428571429], [685.0, 188.0], [683.0, 392.0], [681.0, 289.79999999999995], [682.0, 317.8], [680.0, 410.7368421052632], [675.0, 460.6111111111111], [677.0, 264.6666666666667], [676.0, 213.52380952380952], [678.0, 646.7142857142857], [702.0, 234.16666666666666], [703.0, 244.75], [688.0, 263.8888888888889], [689.0, 408.75], [691.0, 238.75], [690.0, 213.0], [701.0, 284.8571428571429], [699.0, 338.8571428571429], [698.0, 127.0], [700.0, 360.22222222222223], [696.0, 941.0], [679.0, 394.57142857142856], [694.0, 306.5], [695.0, 228.4], [693.0, 341.1666666666667], [692.0, 242.5], [711.0, 646.0], [714.0, 487.18181818181813], [715.0, 359.625], [713.0, 355.4], [712.0, 279.1333333333333], [716.0, 301.0], [718.0, 370.2], [717.0, 233.28571428571428], [719.0, 353.25], [704.0, 395.8333333333333], [705.0, 1204.0], [706.0, 346.5], [707.0, 311.0], [708.0, 411.8333333333333], [709.0, 296.54545454545456], [710.0, 279.3333333333333], [721.0, 430.6521739130435], [720.0, 332.41176470588243], [735.0, 153.77777777777777], [722.0, 334.75000000000006], [723.0, 345.6666666666667], [724.0, 319.46666666666664], [725.0, 337.6190476190476], [727.0, 440.70000000000005], [726.0, 369.1666666666667], [734.0, 236.57142857142856], [732.0, 248.60869565217394], [733.0, 151.99999999999997], [731.0, 420.75000000000006], [729.0, 342.0], [728.0, 335.0], [730.0, 356.38461538461536], [740.0, 187.4516129032258], [736.0, 279.05263157894734], [751.0, 628.8125], [750.0, 497.0], [748.0, 263.50000000000006], [749.0, 319.0], [737.0, 337.3809523809524], [739.0, 365.6923076923076], [738.0, 488.0], [755.0, 693.0], [759.0, 350.16666666666663], [758.0, 230.625], [757.0, 420.56249999999994], [756.0, 493.15384615384613], [767.0, 371.5454545454545], [752.0, 247.1428571428571], [754.0, 316.29999999999995], [753.0, 222.5], [766.0, 1081.6666666666667], [764.0, 299.47368421052636], [743.0, 391.8571428571429], [761.0, 663.7692307692307], [760.0, 100.75], [763.0, 124.33333333333334], [762.0, 212.83333333333331], [741.0, 308.05], [742.0, 182.83333333333334], [765.0, 265.3636363636365], [747.0, 474.8421052631579], [745.0, 424.0], [744.0, 335.2857142857143], [746.0, 271.7692307692307], [775.0, 317.4], [796.0, 360.5], [777.0, 487.55555555555554], [776.0, 224.91666666666669], [778.0, 341.79999999999995], [783.0, 389.7142857142857], [768.0, 409.73333333333335], [769.0, 441.7], [770.0, 307.0], [771.0, 361.63157894736844], [773.0, 684.5384615384615], [774.0, 206.5], [772.0, 273.8], [782.0, 352.8571428571429], [781.0, 270.625], [780.0, 268.9411764705882], [779.0, 202.33333333333334], [786.0, 412.52631578947376], [798.0, 575.25], [785.0, 758.6470588235294], [784.0, 393.8571428571429], [799.0, 439.82352941176464], [797.0, 378.8666666666666], [794.0, 333.6296296296297], [792.0, 153.42857142857144], [793.0, 606.4705882352941], [795.0, 228.46666666666667], [791.0, 502.1818181818182], [790.0, 479.6], [789.0, 321.3999999999999], [788.0, 376.79999999999995], [787.0, 338.7450980392159], [805.0, 399.25000000000006], [806.0, 297.1714285714285], [804.0, 303.16666666666674], [815.0, 343.6923076923077], [800.0, 584.6666666666666], [802.0, 406.0357142857142], [801.0, 403.7916666666667], [803.0, 270.4761904761905], [807.0, 249.58333333333337], [814.0, 206.29166666666669], [813.0, 291.6363636363637], [812.0, 572.8571428571429], [811.0, 314.3571428571429], [810.0, 610.5], [808.0, 416.5], [809.0, 640.0], [825.0, 305.28971962616816], [826.0, 696.3333333333333], [824.0, 300.3076923076923], [829.0, 710.8571428571429], [828.0, 321.3333333333333], [830.0, 332.92857142857144], [827.0, 341.2], [816.0, 412.2], [831.0, 442.8], [821.0, 257.83333333333337], [822.0, 327.2], [823.0, 537.0], [820.0, 318.6], [818.0, 394.1], [819.0, 575.1818181818181], [817.0, 305.7692307692308], [837.0, 318.50000000000006], [862.0, 416.0], [863.0, 205.8], [861.0, 274.8888888888889], [860.0, 199.40000000000003], [859.0, 285.3333333333333], [855.0, 205.14285714285714], [854.0, 93.25], [853.0, 399.5], [852.0, 249.5], [851.0, 951.0000000000001], [847.0, 313.75], [836.0, 536.5833333333334], [835.0, 388.57142857142856], [834.0, 502.4545454545455], [833.0, 343.0769230769231], [832.0, 1001.5], [846.0, 211.0769230769231], [857.0, 313.18750000000006], [858.0, 140.25], [856.0, 425.25], [839.0, 663.4583333333334], [838.0, 312.3571428571429], [848.0, 323.83333333333337], [849.0, 345.42857142857144], [850.0, 432.4285714285714], [844.0, 348.5], [843.0, 273.375], [842.0, 729.0], [840.0, 376.77777777777777], [841.0, 972.3333333333333], [845.0, 262.8125], [870.0, 271.3636363636364], [874.0, 214.00000000000003], [875.0, 248.5], [873.0, 265.2], [872.0, 282.8333333333333], [877.0, 313.0], [876.0, 330.0], [878.0, 280.7142857142857], [879.0, 300.5714285714286], [866.0, 383.1666666666667], [867.0, 443.8333333333333], [865.0, 332.6], [864.0, 375.5], [869.0, 258.3333333333333], [868.0, 281.6], [881.0, 427.8181818181818], [880.0, 327.70000000000005], [883.0, 307.49999999999994], [882.0, 393.93333333333334], [895.0, 366.20000000000005], [894.0, 295.60714285714283], [893.0, 713.2], [892.0, 772.4444444444445], [884.0, 320.37499999999994], [886.0, 577.7777777777778], [885.0, 496.55555555555554], [887.0, 302.54545454545456], [888.0, 423.0], [871.0, 214.2857142857143], [889.0, 413.5], [890.0, 466.2666666666667], [891.0, 243.83333333333337], [923.0, 331.4], [900.0, 376.2142857142858], [905.0, 457.1666666666667], [904.0, 32.0], [907.0, 695.0], [906.0, 826.6249999999999], [910.0, 168.16666666666666], [909.0, 623.6666666666667], [911.0, 411.05], [899.0, 456.375], [898.0, 911.0], [896.0, 283.1111111111111], [897.0, 1119.8571428571427], [908.0, 383.76923076923083], [919.0, 626.0], [918.0, 365.8], [913.0, 323.75], [912.0, 343.6666666666667], [914.0, 535.0], [915.0, 1449.6666666666667], [917.0, 369.52941176470586], [916.0, 490.1111111111111], [927.0, 269.0], [926.0, 281.1111111111111], [921.0, 272.75000000000006], [922.0, 320.7142857142857], [924.0, 461.375], [925.0, 216.33333333333334], [920.0, 261.66666666666674], [903.0, 565.0526315789473], [901.0, 616.2727272727271], [902.0, 438.42857142857144], [953.0, 465.2222222222222], [957.0, 397.3157894736843], [959.0, 290.48275862068965], [945.0, 316.20000000000005], [944.0, 246.74999999999997], [946.0, 194.71428571428572], [948.0, 209.73684210526315], [949.0, 347.38095238095235], [947.0, 236.9230769230769], [950.0, 278.0625], [956.0, 371.95], [958.0, 351.76470588235287], [955.0, 305.58333333333337], [952.0, 259.6153846153846], [935.0, 684.2105263157895], [932.0, 248.66666666666669], [933.0, 192.2], [934.0, 263.25], [931.0, 268.1333333333333], [930.0, 231.88235294117646], [929.0, 251.69230769230768], [928.0, 237.42857142857142], [943.0, 199.41666666666669], [939.0, 421.7272727272727], [940.0, 221.37500000000003], [941.0, 346.71428571428567], [942.0, 260.57142857142856], [938.0, 178.3846153846154], [937.0, 297.8], [936.0, 305.55000000000007], [954.0, 258.84615384615387], [951.0, 299.2857142857143], [966.0, 328.77777777777777], [986.0, 285.75], [969.0, 286.75000000000006], [968.0, 300.9333333333334], [970.0, 428.1034482758621], [988.0, 265.0625], [989.0, 287.16], [990.0, 273.82758620689657], [987.0, 317.4285714285714], [976.0, 808.9285714285714], [991.0, 486.70588235294116], [985.0, 514.875], [981.0, 372.5131578947367], [983.0, 483.67857142857144], [982.0, 465.0857142857142], [984.0, 544.0952380952382], [975.0, 291.6086956521738], [974.0, 111.5], [961.0, 331.73333333333335], [960.0, 290.25], [963.0, 403.52941176470586], [962.0, 440.7083333333333], [965.0, 552.0454545454544], [964.0, 360.68749999999994], [967.0, 299.26666666666665], [973.0, 269.85714285714283], [972.0, 212.72222222222223], [971.0, 347.56666666666666], [980.0, 453.72727272727275], [979.0, 500.2857142857142], [978.0, 488.88888888888897], [977.0, 539.5384615384615], [999.0, 176.83333333333331], [1022.0, 423.0], [1023.0, 292.2], [1009.0, 363.2857142857143], [1008.0, 291.44444444444446], [1021.0, 298.7619047619048], [1020.0, 110.16666666666666], [1019.0, 261.8], [1017.0, 397.13636363636357], [1018.0, 713.5714285714287], [1016.0, 276.00000000000006], [997.0, 386.53846153846155], [998.0, 352.31999999999994], [996.0, 338.8571428571429], [994.0, 273.81818181818176], [995.0, 255.62499999999994], [992.0, 419.05882352941177], [1007.0, 302.70588235294116], [1006.0, 174.66666666666669], [1005.0, 295.23809523809524], [1004.0, 356.81250000000006], [1003.0, 322.9090909090909], [993.0, 233.26086956521735], [1015.0, 497.27777777777777], [1013.0, 295.7777777777777], [1014.0, 773.125], [1012.0, 632.25], [1010.0, 472.3], [1011.0, 450.75], [1002.0, 250.2], [1001.0, 308.0869565217391], [1000.0, 140.7], [1074.0, 512.6111111111111], [1036.0, 212.6470588235294], [1038.0, 318.42857142857144], [1072.0, 299.8125], [1056.0, 164.0], [1086.0, 451.9375], [1084.0, 231.7], [1058.0, 324.58333333333337], [1060.0, 491.8461538461539], [1062.0, 323.125], [1066.0, 387.5555555555556], [1070.0, 244.0], [1068.0, 197.8], [1064.0, 413.71428571428567], [1082.0, 287.8461538461538], [1076.0, 267.63043478260863], [1078.0, 201.88888888888889], [1080.0, 408.22222222222223], [1050.0, 388.53846153846155], [1054.0, 590.3076923076923], [1052.0, 330.2222222222223], [1024.0, 231.21428571428572], [1026.0, 444.99999999999994], [1048.0, 234.55555555555554], [1046.0, 451.5], [1044.0, 209.73333333333335], [1040.0, 281.92307692307696], [1042.0, 207.1578947368421], [1032.0, 240.9090909090909], [1030.0, 329.2272727272728], [1034.0, 477.0], [1028.0, 510.11764705882354], [1092.0, 554.8571428571428], [1120.0, 664.3076923076924], [1088.0, 554.5], [1118.0, 550.1333333333333], [1106.0, 269.87500000000006], [1108.0, 488.66666666666663], [1110.0, 469.6666666666667], [1114.0, 523.8888888888889], [1112.0, 528.5833333333334], [1104.0, 254.21052631578948], [1116.0, 493.29629629629625], [1090.0, 266.7083333333333], [1094.0, 255.6666666666667], [1096.0, 364.08], [1098.0, 412.0256410256411], [1100.0, 323.1538461538462], [1136.0, 119.5], [1102.0, 372.7692307692308], [1138.0, 98.5], [1140.0, 610.25], [1144.0, 326.50000000000006], [1142.0, 705.6666666666667], [1150.0, 658.0], [1146.0, 313.8333333333333], [1122.0, 322.6875], [1124.0, 264.1666666666667], [1134.0, 203.1818181818182], [1132.0, 114.83333333333334], [1130.0, 879.0], [1128.0, 181.25], [1126.0, 448.7000000000001], [1204.0, 284.2], [1212.0, 357.8], [1154.0, 472.8181818181818], [1152.0, 389.5], [1180.0, 202.5], [1156.0, 823.4285714285714], [1158.0, 333.4], [1178.0, 267.0], [1176.0, 259.6666666666667], [1174.0, 402.2857142857143], [1170.0, 346.2], [1172.0, 310.0], [1168.0, 207.0], [1160.0, 431.3125], [1194.0, 336.28571428571433], [1198.0, 219.8], [1196.0, 273.7692307692308], [1200.0, 204.3636363636364], [1166.0, 193.75], [1164.0, 400.3333333333333], [1162.0, 494.5714285714286], [1202.0, 248.0], [1214.0, 577.375], [1186.0, 243.5], [1184.0, 267.5], [1188.0, 253.75], [1190.0, 244.16666666666666], [1192.0, 344.6666666666667], [1210.0, 148.4], [1208.0, 211.58333333333334], [1206.0, 75.5], [1222.0, 235.17647058823533], [1220.0, 228.9411764705882], [1218.0, 310.2439024390244], [1216.0, 213.77777777777777], [1246.0, 191.33333333333334], [1244.0, 263.5], [1238.0, 223.00000000000003], [1240.0, 1232.25], [1236.0, 133.75], [1234.0, 177.70000000000002], [1232.0, 318.40000000000003], [1224.0, 164.84615384615384], [1228.0, 234.58333333333334], [1278.0, 370.24999999999994], [1276.0, 213.5], [1274.0, 233.0], [1272.0, 249.5], [1270.0, 123.57142857142858], [1268.0, 283.0], [1266.0, 250.33333333333334], [1264.0, 480.0], [1230.0, 185.33333333333334], [1248.0, 74.0], [1250.0, 296.75], [1252.0, 76.0], [1258.0, 214.0], [1256.0, 2729.0], [1260.0, 219.33333333333334], [1262.0, 252.66666666666666], [1226.0, 73.71428571428572], [1328.0, 393.4], [1298.0, 179.71428571428572], [1296.0, 278.5], [1300.0, 538.0], [1310.0, 52.0], [1280.0, 406.75], [1304.0, 997.6666666666667], [1316.0, 284.00000000000006], [1318.0, 491.75], [1314.0, 249.0], [1330.0, 149.5], [1334.0, 413.0], [1338.0, 130.6], [1336.0, 249.0], [1342.0, 444.5], [1312.0, 157.0], [1320.0, 699.6666666666667], [1324.0, 254.33333333333334], [1322.0, 263.6666666666667], [1326.0, 1780.0], [1350.0, 988.3333333333334], [1348.0, 102.5], [1346.0, 250.0], [1386.0, 571.0], [1384.0, 237.0], [1382.0, 903.0], [1378.0, 292.7142857142857], [1358.0, 243.0], [1368.0, 242.0], [1366.0, 230.0], [1364.0, 241.66666666666666], [1446.0, 169.25], [1418.0, 373.3333333333333], [1440.0, 145.0], [1442.0, 170.4], [1448.0, 147.125], [1450.0, 151.5], [1452.0, 100.2], [1454.0, 325.0], [1420.0, 697.0], [1422.0, 445.66666666666663], [1458.0, 114.6], [1466.0, 125.66666666666666], [1462.0, 166.0], [1414.0, 301.2], [1416.0, 425.3333333333333], [1412.0, 128.0], [1438.0, 149.4], [1410.0, 139.0], [1436.0, 136.25], [1434.0, 97.0], [1432.0, 96.5], [1430.0, 108.8], [1428.0, 123.0], [1426.0, 466.25], [1424.0, 477.8], [1075.0, 680.1111111111111], [1037.0, 232.92857142857144], [1039.0, 308.7692307692308], [1049.0, 349.1111111111111], [1087.0, 206.375], [1085.0, 315.07142857142856], [1083.0, 206.3], [1057.0, 258.22222222222223], [1059.0, 320.6842105263158], [1061.0, 437.5], [1063.0, 226.83333333333334], [1071.0, 467.33333333333337], [1067.0, 529.6666666666666], [1069.0, 290.75], [1065.0, 247.75], [1081.0, 204.99999999999997], [1079.0, 351.6363636363636], [1077.0, 312.5294117647059], [1073.0, 298.6818181818182], [1055.0, 190.25], [1053.0, 471.46153846153845], [1051.0, 319.2962962962962], [1025.0, 399.0416666666665], [1027.0, 448.6060606060607], [1047.0, 436.58823529411757], [1043.0, 327.38888888888886], [1045.0, 313.79999999999995], [1041.0, 289.05263157894734], [1031.0, 447.0], [1029.0, 366.0], [1035.0, 532.1333333333332], [1033.0, 246.0], [1093.0, 436.8], [1089.0, 289.40740740740745], [1119.0, 555.5000000000001], [1115.0, 346.125], [1105.0, 290.85], [1111.0, 254.842105263158], [1109.0, 544.2857142857143], [1113.0, 189.75], [1107.0, 190.0909090909091], [1117.0, 606.875], [1091.0, 415.2916666666665], [1097.0, 337.42857142857144], [1095.0, 324.8999999999999], [1099.0, 396.21739130434787], [1101.0, 465.7692307692307], [1103.0, 266.11764705882354], [1137.0, 112.42857142857143], [1139.0, 256.14285714285717], [1141.0, 283.5], [1143.0, 815.5], [1145.0, 331.09090909090907], [1151.0, 1145.5], [1149.0, 746.0], [1147.0, 1409.5], [1121.0, 231.375], [1123.0, 300.27777777777777], [1135.0, 276.7307692307693], [1133.0, 265.3333333333333], [1131.0, 194.125], [1129.0, 279.42857142857144], [1127.0, 261.0], [1125.0, 288.2727272727273], [1157.0, 264.8888888888889], [1153.0, 299.5], [1183.0, 206.0], [1155.0, 314.3333333333333], [1159.0, 772.8571428571429], [1179.0, 271.5], [1175.0, 258.0], [1173.0, 289.75], [1171.0, 282.6666666666667], [1169.0, 99.33333333333334], [1199.0, 309.3333333333333], [1197.0, 71.0], [1167.0, 474.75], [1165.0, 618.6666666666667], [1163.0, 2024.0], [1161.0, 790.5], [1203.0, 202.0], [1201.0, 300.3333333333333], [1213.0, 330.44444444444446], [1185.0, 670.7142857142858], [1215.0, 456.0], [1189.0, 259.14285714285717], [1187.0, 219.0], [1193.0, 278.25], [1195.0, 313.0], [1191.0, 247.5], [1211.0, 427.75], [1209.0, 124.0], [1207.0, 180.5], [1205.0, 359.25], [1221.0, 144.70000000000002], [1219.0, 272.2142857142858], [1245.0, 75.0], [1247.0, 104.66666666666667], [1243.0, 296.42857142857144], [1241.0, 73.33333333333333], [1239.0, 196.74193548387098], [1237.0, 135.25], [1235.0, 246.41666666666669], [1233.0, 143.28571428571422], [1223.0, 241.55555555555554], [1217.0, 303.9166666666667], [1225.0, 82.81818181818181], [1249.0, 297.3333333333333], [1275.0, 249.0], [1273.0, 256.0], [1271.0, 232.8], [1267.0, 242.14285714285714], [1265.0, 279.0], [1269.0, 395.0], [1231.0, 268.1111111111111], [1229.0, 107.08333333333334], [1279.0, 633.5], [1251.0, 187.0], [1253.0, 253.0], [1257.0, 3386.0], [1255.0, 398.85714285714283], [1259.0, 253.66666666666666], [1263.0, 214.75], [1227.0, 197.44444444444446], [1333.0, 478.5], [1337.0, 295.2], [1305.0, 47.0], [1309.0, 162.5], [1291.0, 514.6666666666666], [1297.0, 183.4], [1299.0, 228.5], [1303.0, 491.6666666666667], [1301.0, 588.0], [1315.0, 410.3333333333333], [1317.0, 193.4], [1319.0, 521.0], [1331.0, 574.4], [1295.0, 280.5], [1335.0, 56.0], [1339.0, 265.0], [1343.0, 601.0], [1313.0, 541.0], [1323.0, 256.0], [1321.0, 249.0], [1325.0, 167.0], [1327.0, 580.5], [1393.0, 229.0], [1349.0, 203.66666666666666], [1345.0, 239.66666666666669], [1371.0, 528.8333333333333], [1367.0, 459.3333333333333], [1363.0, 902.0], [1351.0, 118.66666666666666], [1355.0, 671.5], [1353.0, 197.75], [1391.0, 55.5], [1389.0, 591.5], [1385.0, 1822.0], [1383.0, 882.0], [1379.0, 891.0], [1421.0, 60.0], [1423.0, 556.8], [1463.0, 122.0], [1461.0, 166.0], [1441.0, 181.33333333333334], [1445.0, 182.25], [1447.0, 152.0], [1449.0, 189.0], [1451.0, 283.2], [1453.0, 90.5], [1455.0, 293.0], [1415.0, 386.25], [1417.0, 369.75], [1419.0, 150.0], [1413.0, 726.5], [1411.0, 128.0], [1409.0, 605.6666666666666], [1435.0, 109.5], [1439.0, 162.0], [1433.0, 114.33333333333333], [1431.0, 614.0], [1429.0, 146.0], [1425.0, 20.5]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst", "isController": false}, {"data": [[890.0078999999994, 426.1313000000002]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1466.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 62666.666666666664, "minX": 1.68811434E12, "maxY": 424275.2, "series": [{"data": [[1.68811434E12, 424275.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68811434E12, 62666.666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68811434E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 426.1313000000002, "minX": 1.68811434E12, "maxY": 426.1313000000002, "series": [{"data": [[1.68811434E12, 426.1313000000002]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68811434E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 423.0008000000008, "minX": 1.68811434E12, "maxY": 423.0008000000008, "series": [{"data": [[1.68811434E12, 423.0008000000008]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68811434E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 92.08999999999989, "minX": 1.68811434E12, "maxY": 92.08999999999989, "series": [{"data": [[1.68811434E12, 92.08999999999989]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68811434E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.68811434E12, "maxY": 5095.0, "series": [{"data": [[1.68811434E12, 5095.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68811434E12, 2308.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68811434E12, 4734.73]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68811434E12, 3075.6499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68811434E12, 77.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68811434E12, 970.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68811434E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 244.0, "minX": 22.0, "maxY": 2542.0, "series": [{"data": [[2069.0, 698.0], [1094.0, 721.0], [2193.0, 1015.0], [2592.0, 1360.5], [22.0, 2542.0], [1593.0, 1146.0], [437.0, 1160.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2069.0, 279.0], [1094.0, 244.0], [2193.0, 273.0], [2592.0, 244.0], [22.0, 2530.0], [1593.0, 315.0], [437.0, 1013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2592.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 244.0, "minX": 22.0, "maxY": 2542.0, "series": [{"data": [[2069.0, 688.0], [1094.0, 714.0], [2193.0, 988.5], [2592.0, 1358.0], [22.0, 2542.0], [1593.0, 1125.0], [437.0, 1136.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2069.0, 279.0], [1094.0, 244.0], [2193.0, 273.0], [2592.0, 244.0], [22.0, 2530.0], [1593.0, 315.0], [437.0, 1013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2592.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.68811434E12, "maxY": 166.66666666666666, "series": [{"data": [[1.68811434E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68811434E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 23.766666666666666, "minX": 1.68811434E12, "maxY": 113.13333333333334, "series": [{"data": [[1.68811434E12, 23.766666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68811434E12, 29.766666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.68811434E12, 113.13333333333334]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68811434E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 23.766666666666666, "minX": 1.68811434E12, "maxY": 142.9, "series": [{"data": [[1.68811434E12, 142.9]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst-failure", "isController": false}, {"data": [[1.68811434E12, 23.766666666666666]], "isOverall": false, "label": "http://zs.neu.edu.cn/_web/_search/api/search/new.rst-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68811434E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 23.766666666666666, "minX": 1.68811434E12, "maxY": 142.9, "series": [{"data": [[1.68811434E12, 23.766666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68811434E12, 142.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68811434E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

